// python instrumentation
// create an httpserver with python
// on python machine:
pip install prometheus_client
// on pythn code:
from prometheus_client import start_http_server
// on main func
start_http_server(8001)
// add its address and port on prometheus.yaml config file
// on prometheus query (to test):
python_info

// use counter 1 (count total requests)
// on python code:
from prometheus_client import Counter
REQUEST_COUNT = Counter('<metric_name>','<metric_description>')
// in a func (http get handler)
REQUEST_COUNT.inc()
// on prometheus query (to test):
<metric_name>

// use counter 2 (count total request of each path individualy)
// on python code:
from prometheus_client import Counter
REQUEST_COUNT = Counter('<metric_name>','<metric_description>')['app_name','endpoint']
// in a func (http get handler)
REQUEST_COUNT.labels('my_app',self.path).inc()
// on prometheus query (to test):
<metric_name>
// output:
<metric_name>{app_name="my_app",endpoint="/home"} 6
<metric_name>{app_name="my_app",endpoint="/login"} 4

// use gauge 1
// on python code:
from prometheus_client import Gauge
REQUEST_INPROGRESS = Gauge('<metric_name>','<metric_description>')
REQUEST_LAST_SURVED = Gauge('<metric_name>','<metric_description>')
// in a func (http get handler)
// at beginning
REQUEST_INPROGRESS.inc()
// at the end
REQUEST_LAST_SURVED.set(time.time())
REQUEST_INPROGRESS.dec()
// on prometheus query (to test):
<metric_name>

// use gauge 2 (same job using methods)
// on python code:
from prometheus_client import Gauge
REQUEST_INPROGRESS = Gauge('<metric_name>','<metric_description>')
REQUEST_LAST_SURVED = Gauge('<metric_name>','<metric_description>')
// before func definition (http get handler)
@REQUEST_INPROGRESS.track_inprogress()
at the end of the func
REQUEST_LAST_SURVED.set_to_current_time()
// on prometheus query (to test):
<metric_name>

// use summary 1
// on python code:
from prometheus_client import Summary
REQUEST_RESPOND_TIME = Summary('<metric_name>','<metric_description>')
// in a func (http get handler)
// at beginning
start_time = time.time()
// at the end
end_time = time.time()
time_taken = end_time - start_time
REQUEST_RESPOND_TIME.observe(time_taken)
// on prometheus query (to test):
<metric_name>
// output:
<metric_name>_count 5 // # of requests
<metric_name>_sum 25 // sum of all processing times

// use summary 2 (same job using methods)
// on python code:
from prometheus_client import Summary
REQUEST_RESPOND_TIME = Summary('<metric_name>','<metric_description>')
// before func definition (http get handler)
@REQUEST_RESPOND_TIME.time()
// on prometheus query (to test):
<metric_name>
// output:
<metric_name>_count 5 // # of requests
<metric_name>_sum 25 // sum of all processing times

// use histogram 1
// on python code:
from prometheus_client import Histogram
REQUEST_RESPOND_TIME = Histogram('<metric_name>','<metric_description>')
// before func definition (http get handler)
@REQUEST_RESPOND_TIME.time()
// on prometheus query (to test):
<metric_name>
// output:
<metric_name>_bucket{le="0.005"} 0
<metric_name>_bucket{le="0.01"} 1
<metric_name>_bucket{le="0.025"} 1
...
<metric_name>_count 5 // # of requests
<metric_name>_sum 25 // sum of all processing times

// use histogram 2 (custom bucket range)
// on python code:
from prometheus_client import Histogram
REQUEST_RESPOND_TIME = Histogram('<metric_name>','<metric_description>', buckets=[0.1,0.5,1,3])
// before func definition (http get handler)
@REQUEST_RESPOND_TIME.time()
// on prometheus query (to test):
<metric_name>
// output:
<metric_name>_bucket{le="0.1"} 0
<metric_name>_bucket{le="0.2"} 1
<metric_name>_bucket{le="1"} 1
<metric_name>_bucket{le="3"} 1
<metric_name>_count 5 // # of requests
<metric_name>_sum 25 // sum of all processing times


// push metric to pushgateway
from prometheus_client import CollectorRegistry, Gauge, push_to_gateway
registry = CollectorRegistry()
g = Gauge('job_last_success_unixtime', 'Last time a batch job successfully finished', registry=registry)
g.set_to_current_time()
push_to_gateway('localhost:9091', job='batchA', registry=registry)